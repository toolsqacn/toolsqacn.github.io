{"./":{"url":"./","title":"鸣谢","keywords":"","body":" Postman API 自动化测试与持续集成全栈 作者：杜铁绳 作者简介 企业敏捷与 DevOps 咨询顾问，DevOps 、自动化测试工具专家，企业应用高级架构师。 最新版本：v1.0 更新时间：2019年10月17日 鸣谢 微信公众号 书籍简介 Postman API 自动化测试、持续基础知识与技能 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： 在线浏览 Postman API 自动化测试与持续集成全栈 www.qatools.cn Postman API 自动化测试与持续集成全栈 qatools.github.io 版权说明 如有发现侵犯您版权，请通过邮箱联系我 service@qatools.cn，谢谢合作。 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-17 17:38:18 "},"introduction.html":{"url":"introduction.html","title":"内容介绍","keywords":"","body":"前言 当想要分析一下别人开发的或者自己开发的 RESTful API 时，Postman 是一个很好的工具。Postman 深受开发人员和测试人员的欢迎，因为它提供了一个很好的用户图形界面 （GUI）发送 HTTP 请求，而不必再编写一堆辅助代码。 如果不使用类似 Postman 之类的 API 测试工具时，要验证服务器端 API 返回的响应是否正确，就需要把客户端调用相应 API 的全部代码写出来，人工查看返回结果，并且返回结果如果需要格式化显示或者生成测试报告，就需要更大的工作量。Postman 确保开发人员把主要精力放在真正有价值的特性开发上，而不用为了验证 API 是否正确花费太大的精力。同时也降低了测试人员验证 API 正确性的复杂程度，不用掌握太高深的编程技能也能进行 API 测试。 有了 Postman API 测试变得简单很多。使用 Postman 发送一个 RESTful API 请求只需要选择请求的方法，例如 GET、POST 等，在地址栏 （URL） 栏输入被请求资源的地址，在请求头（HEADERS）填入请求需要的参数，然后选择服务器响应后返回的数据格式，点击发送即可。接收到服务器返回的数据后，Postman 自动解析成易读的 JSON 格式，也可以设置好验证断言，让 Postman 自动验证服务器返回结果是否符合预期。 Success::友情提醒&#x1F46D; 如果您喜欢，请赞赏购买《Postman API 测试与持续集成全栈攻略》完整电子版！购买后请留下您的Email，我们将及时送达您的邮箱！ 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-16 20:52:06 "},"section1/introduction-to-api.html":{"url":"section1/introduction-to-api.html","title":"RESTful API 测试介绍","keywords":"","body":"API 测试介绍 什么是 API API 是应用程序编程接口（Application Programming Interface）的简称。从技术上讲，API 是 应用系统、操作系统、开发库等对一系列过程、函数的封装，开发人员可以使用 API 编程对其它的 应用系统、操作系统、开发库提供的功能进行调用。 如果以上对 API 的解释比较难以理解的话，我们举一个例子说明。假如你到了一个来到一个餐馆，不巧的时服务员这个时候不在。你可以到餐桌上拿到菜单，然后直接像厨师点菜，厨师就会按照你的要求去做。但是有时也会存在你点的菜没有原材料了。你就需要再次拿起菜单，再点一个其它菜。当有很多顾客都同时向厨师直接点菜时，厨师就要分出很大的精力去处理客户的订单，而不能专心做菜了。 另外我们这个世界有几百种语言。如果厨师不能听懂客户的语言该怎么办？这是最好有一个专门能听懂客户点菜的服务员。服务员就是厨师的 API，他（她）接收顾客的请求，然后传递给厨师，最后把顾客点的菜从厨师那里返回给顾客。服务员可以听懂顾客和厨师双方的语言。如果顾客点的菜后厨已经售罄，然后请顾客再选一个其它菜。这样可以节省顾客直接询问厨师的往返时间，顾客的体验也好多了。以上服务员服务顾客的这个过程也就是 API 的作用。 sequenceDiagram participant Customer as 顾客&#x1F9D2; participant Waiter as 服务员&#x1F481; participant Chef as 厨师&#x1F468;‍&#x1F373; Customer->>Waiter: 服务员点菜！ Waiter->>Chef: 大厨兰州拉面一份！ Chef->>Waiter: Bing Ling…… 服务员菜做好了。 Waiter->>Customer: 美女您的菜来了！ 如上面的图所描述的那样，顾客向服务员提出订单，服务员的作用就时 API ，他（她）接收到订单转发给厨师，厨师这是就是后台的服务程序。服务程序处理完请求后把结果返回给顾客。像上面例子，厨师就是服务器应用，他从服务员（API）那里获得服务请求，处理请求（烹煮食物），然后把处理完成的结果（美味菜肴）返回给 API (服务员)。至于 调用 API 需要传入的不同参数，可以认为是顾客对菜肴不同口味的要求，例如多放辣椒、放自然、放咖喱、多加盐等。这些参数可以让服务器应用（厨师）采用不同的处理方式来处理请求。 API （应用程序接口）从客户终端设备中获得请求，然后把请请求发送给远程服务器，服务器处理完成后，API 从服务器获得处理结果，把处理结果再传回给客户终端。在现在的 IT 架构中，API 到处可见，被大量应用。API 根据使用要求，传入不同的参数后，从服务器端获得相应的处理结果。例如航班查询中，根据对航班的出发港、到达港、起飞时间等要求，可以查询出不同的航班、不同的票价等信息。作为客户端开发人员，通过 API 处理复杂且难以处理的请求，变得和容易，只要按照 API 的调用要求，正确的传入请求参数即可。这也是 API 的好处，它让 API 变得非常流行，随处可见。 API 测试 我们上面介绍了 API ，也知道了 API 对当前世界中分布式 IT 服务应用的重要性，因此 API 测试也随之变的重要。 API 测试可以提高服务应用的代码质量，提前发现服务应用的问题，并及时修复。相对于传统的 GUI 测试，API 测试可以底层的角度发现 GUI 测试不容易暴露的服务端问题，具有更短的问题反馈时间，更高效的解决问题的方式。 API 测试既可以使用手工测试，也可以使用自动化测试。在敏捷和 DevOps 更加流行的当下，持续测试已经成了被广泛认可的方法。由于 GUI 的自动化存在不少的缺点，例如测试脚本经常由于 GUI 变动而导致失败、测试执行效率低耗时长、测试人员等待时间长测试时节靠后需要开发提供 GUI 才能测试等。 在敏捷时代，测试应该前移，应该尽可能早地开始，应该进行更低层级的测试，例如 API 层、单元层。API 测试可以有开发人员执行，可以在 GUI 尚未开发的情况下进行。特别是在基于契约测试的情况下，API 甚至可以在服务端开发没有完成的情况下进行。 软件应用中的 API 在被正式部署前应该很好的测试，API 测试既是开发人员的工作，也是测试人员的工作。高质量的 API 对于应用程序很重要，它可以消除掉应用服务在被正式部署后可能出现的很多问题。基于此业界范围内也开发出了很多 API 测试工具、框架等。Postman 就是其中比较著名的一个。 测试人员在 API 测试中的角色和职责 作为 API 测试人员，应该对 API 有全面的知识体系，例如 Web 服务、REST、SOAP、微服务等。 API 测试需要的技能栈： 能够使用 WEB 调用方法 GET、POST、PUT、DELETE等 能够验证请求响应 （RESPONSE）、错误代码（ERROR CODE）等 JSON 格式、XML 格式的内容 能够使用鉴权方法，例如 OAuth、 OAuth2、BASIC Authorization等 能够做 WEB SERVICE 的性能、安全测试 能够读懂 API 说明文档 能够编写 API 测试案例和场景测试案例 能够编写 SQL 验证与 API 相关的数据库数据 能够熟练掌握 API 测试工具 SOAP UI、Postman、JMeter、RestAssured、Rest Sharp、Node modules等 API 测试与单元测试 很多测试人员把 API 测试和单元测试混在了一起，事实上它们是不同的，负责的范围也不一样。单元测试是基于类的测试或根类同一级别组件的测试。单元测试常常由开发人员负责，验证类或模块是否完成了它的设计功能。开发人员自测负责的类，发现缺陷后自行修改，直至达到设计要求。单元测试保证了么一个类或者模块的正确性，它们是软件质量的基石。 相对于单元测试白盒测试，API 测试应该算是黑盒测试，测试功能连接服务程序对外提供的接口进行测试，而不会对外暴露内部的实现逻辑。API 测试需要对应的服务运行，通过 API 接口与服务器应用交互。 API 测试主要是测试系统架构中的业务逻辑，由集成测试团队负责。测试人员通过调用指定版本的服务程序提供的接口进行测试。这样单元测试主要由开发人员负责，在负责角色上有所区别。 API 测试也对单元进行测试，与单元测试所不同的是，单元测试是把被测单元与系统其它部分隔离出来进行测试，API 测试是把被测单元作为系统相系联系的一部分进行测试。API 测试其实也是端到端的测试。当我们进行 API 测试时，跟 API 相关的模块都会测试到。然而进行单元测试时，仅仅对被测模块或类进行测试，被测试的模块或类是与系统的其他部分隔离开的。 API 测试关注那些点 当我们用API工具进行测试时，往往会遇到很多报错。这些报错不仅有API报错，也有软件应用报错，甚至是服务器错误。这使得软件测试人员关注的范围更广，相关的知识和技能也更重要。软件测试跟软件开发一样遵循一定的顺序和步骤。在软件开发阶段，测试人员可以编写测试案例和测试脚本。开发人员也可以使用测试人员编写的脚本来发现处于开发状态的软件应用的问题。在生产阶段，测试人员可以改善和升级测试案例，让测试案例兼容性更好，对软件的测试质量更有帮助。 本课程托管地址： https://github.com/toolsqacn/postman-in-action 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-14 13:28:54 "},"section1/installation.html":{"url":"section1/installation.html","title":"Postman 下载和安装","keywords":"","body":"Postman 下载与安装 下载 Postman 有 Windows、Linux、MacOS 等多个版本，另外也可在 Chrome 上面安装插件，基于 Chrome 浏览器运行。当前 Postman 的最新版本为 7.6.0 。 读者可以根据自己的需要选择下载不同操作系统对应的版本。 Windows 安装 下载 Windows 安装包 点击安装包 MacOS 安装 下载 macOS 安装程序 Mac OS 的安装文件下载后为 Postman-osx-7.6.0.zip， 需要使用 unzip 解压缩。解压后双击 Postman，或者在控制台终端 （terminate） 使用 unzip 解压。 cd ~/Downloads unzip Postman-osx-7.6.0.zip 解压完毕生成的目录为 Postman.app 。可以 mv 命令手动移动到根目录的 Applications 目录下，也可以双击 Postman.app 的目录图标根据提示点击按钮让程序自己移动到 Applications 目录下。 使用 mv 安装 Postman 程序 mv Postman.app /Applications 双击解压后的 Postman.app 目录图标安装 第1次运行时，由于 Postman 安装程序是从互联网下载的， MacOS 会提示安全风险，让用户确认是否打开，点击 【打开】按钮。 然后系统会弹出对话框提示是否移动到 Applications 目录。 如果您已经使用 mv 命令移动到 Applications 目录，则选择 “Do Not Move”, 注意 ⚠️ 如果此时选择了 “Move to Applications Folder” ，Applications 目录下 Postman.app 程序目录会被删除。 如果您是在下载目录直接双击图标允许的 Postman 程序，则需要选择 “Move to Applications Folder”。 以上两种方式都可以正确安装 Postman 程序。 如果您的 Mac 不允许安装非 App Store 来源的软件可以安照下面步骤设置为 允许安装任何来源 的软件。 终端执行命令 sudo spctl --master-disable 安全行与隐私中设置 任何来源 选项 Linux 安装 安装后设置 创建账户 建议第一次使用 Postman 时，创建一个账户，如果没有账户，将不能使用 Workspace （工作空间），Workspace 可以管理测试集 （Collection）、变量 （Variable）和环境参数 （Environment）。用户账户创建很容易，只需填入 Email、UserName、以及 Password 即可。 登陆账户 如果您已经拥有 Postman 账户可以直接登录。登陆使用创建用户账户时填入的 Email 或 UserName 以及秘密。 登陆成功 登陆成功后，Postman 主界面将会显示 【创建】窗口，这个窗口里面用户可以创建 Request 、 Collection 、 Environment 、API Document 、 Mock Server 、 Monitor 等。 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-14 14:08:59 "},"section1/menus.html":{"url":"section1/menus.html","title":"功能菜单介绍","keywords":"","body":"Postman 功能介绍 功能概览 Postman 为支持多样的功能提供有多个窗口和多个标签页，因此用户使用起来也很方便。它的主窗口包括三大区域：头部工具栏、左侧捷导航栏以及工作区。 头部工具栏 工具栏按钮说明如下： 新建 (New） ：创建请求（requests）、测试集（collections）、环境（environments）、文档（document）、模拟服务器（mocker server）、和监控（monitors）等。 导入（import）：以文件、链接、原始格式数据文本方式导入 Postman 集合、环境变量、WADL、Swagger、RAML、或 cURL 。 执行（Runner）：打开测试执行集 新窗口（New Window）：打开新标签页（Tab）、新窗口（Window)、或执行窗口（Runner Window）。 工作空间（Workspaces）：打开个人工作空间或团队工作空间，可以创建和管理工作空间。 拦截器/代理（Intercepotor/Proxy：代理管理和拦截器设置。 状态同步（SYNC status：Postman 状态状态更新同步按钮。 设置（Settings）：管理 Postman 应用设置，查找其它资源和文档。 信息提示 （Notification）：新消息提示。 推特点赞（Heart) ：链接到 Postman 推特账号 用户账户（Manage Account）：管理用户账户，设置用户账户信息，设置信息提示偏好，激活会话（Active Seesions)。 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-15 14:01:44 "},"section1/create-request.html":{"url":"section1/create-request.html","title":"创建 API 请求","keywords":"","body":"创建请求 本节我们首先创建一个 RESTFul API 请求，填入请求地址，请求参数我们使用 “GET”，请求需要命名以便以后使用。请求选择或创建一个测试集 【Collection】 ，然后选择这个测试集，把命名后的请求保存在这个测试集里面。 保存好后，点击 【Send】按钮发送请求，Postman 接收到服务器返回的响应后，把响应内容显示在 “Body” 文本区。 点击 【新建】 按钮 点击 【新建】 按钮，然后选择 【Request】 菜单。 命名接口和选择测试集 填入请求名称，对接口进行表述，然后创建测试集并选择创建的测试集，也可以选择已经有的测试集，最后点击 【Save】 按钮，保持测试集。 填写请求地址 请求方法选择 【GET】，请求地址填写如下地址： http://qatools.cn/api/message/getList?pageSize=5&apiSource=client 保存 API 请求 点击 【Save】 按钮保存 API 请求。 发送 API 请求 点击 【Send】按钮发送 API 请求到对应的 URL 地址。 查看请求响应结果 在 【Body】区域的文本框内显示请求返回的结果，我们可以对结果进行后续处理。例如，加入断言进行测试，把返回结果存入到环境变量中，在作为其它请求的参数等等。 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-15 15:37:20 "},"section1/request-response.html":{"url":"section1/request-response.html","title":"API 请求与响应处理","keywords":"","body":"API 请求响应处理 发送请求 使用 “GET” 方法发送 HTTP 请求。点击 【Send】按钮后，请求会发送到 URL 地址，接收到请求后，服务器端会根据请求参数返回响应的结果。 响应结果显示 一般情况下，Postman 会根据服务器返回的数据格式按照 “Pretty” 的方式显示结果，便于用户阅读。用户也可以根据需要把数据显示形式修改为 “原始数据（Raw）”、“预览（Preview）”的方式。 Pretty 显示方式 Pretty 显示方式支持的数据格式包括 JSON、XML、HTML、Text等。 Raw 显示方式 显示响应结果的原始数据方式。适用于服务器返回的各种数据格式。 Preview 显示方式 预览方式显示响应数据。如果服务器返回的数据是 HTML 格式的，将以浏览器的模式预览成网页页面。 Cookies Cookies 包含了服务器的一些信息。当我们第一次访问一个网站的时候，会从服务器上下载一个 cookie 到本地。cookie 中包含的信息当再一次访问该网站的时候会被网站服务使用到，网站会基于 cookie 返回特定的信息给客户端。Postman 可以查看服务器返回的 cookie。 响应头 （Headers） HTTP 请求和响应头（Headers）是传送给客户端或者服务器的一些额外信息。它可以在 Postman 的 【Headers】 标签栏查看到。 鼠标点击 Postman 的 【Headers】 标签，可以查看以下头部参数： Content-Type ：返回信息的内容类型，例如 text/html、application/json、application/xml等 Content-Length : 返回信息的长度，字节数据 Date : 返回信息的日期、时间以及时区 Server : 返回信息的应用服务器类型 Cookie expire time : Cookies 的到期时间 复制响应数据 点击标签栏上的 【复制】 按钮可以复制返回的报文内容。 查询响应数据 点击标签栏上的 【查询】按钮，可以查询报文内容 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-15 22:45:38 "},"section1/setting-parameters.html":{"url":"section1/setting-parameters.html","title":"设置请求参数","keywords":"","body":"设置请求参数 设置请求参数 参数是什么 参数是 URL 的一部分，用了向服务器传递具有特定含义的指令。RESTFul API 向服务器传递参数的 URL 格式如下： http://qatools.cn/api/message/getList?pageSize=5&apiSource=client Copy URL 请求中请求参数以” ？“开始，后面跟一个或多个参数。请求参数是一个建值对格式 ”Key = Value“。以上举例中 pageSize=5&apiSource=client 即是请求参数。它们的含义是： pageSize=5 : 返回数据的页面大小为 5 条记录。 apiSource=client : 请求的发起者是客户端 我们把以上请求 URL 填入到浏览器的地址栏中发送会得到以下响应结果： 返回的是 JSON 格式的数据，格式化显示后如下： { \"state\": \"success\", \"docs\": [ { \"_id\": \"HkQkb0K3z\", \"contentId\": { \"_id\": \"H1MLwht3f\", \"title\": \"Selenium 从入门到实战\", \"stitle\": \"Selenium 从入门到实战\", \"updateDate\": \"2019-09-27\", \"date\": \"23 分钟前\", \"id\": \"H1MLwht3f\" }, \"replyAuthor\": null, \"relationMsgId\": \"\", \"author\": { \"_id\": \"BymMMRr2f\", \"userName\": \"docker\", \"logo\": \"/upload/images/defaultlogo.png\", \"date\": \"2018-04-19 16:23:38\", \"enable\": true, \"id\": \"BymMMRr2f\" }, \"__v\": 0, \"content\": \"哪里有教程看？\", \"hasPraise\": false, \"praiseNum\": 0, \"date\": \"1 年前\", \"utype\": \"0\", \"id\": \"HkQkb0K3z\" }, { \"_id\": \"r1AvlJ3qz\", \"contentId\": { \"_id\": \"B1MOC0oqz\", \"title\": \"测试管理要素\", \"stitle\": \"测试管理要素\", \"updateDate\": \"2019-09-27\", \"date\": \"23 分钟前\", \"id\": \"B1MOC0oqz\" }, \"replyAuthor\": null, \"relationMsgId\": \"\", \"author\": { \"_id\": \"S1FGh0icz\", \"userName\": \"toolsqa\", \"logo\": \"/upload/images/defaultlogo.png\", \"date\": \"2018-03-30 23:47:29\", \"enable\": true, \"id\": \"S1FGh0icz\" }, \"__v\": 0, \"content\": \"第一部分继续发布啊\", \"hasPraise\": false, \"praiseNum\": 0, \"date\": \"1 年前\", \"utype\": \"0\", \"id\": \"r1AvlJ3qz\" } ], \"pageInfo\": { \"totalItems\": 2, \"current\": 1, \"pageSize\": 5, \"searchkey\": \"\" } } Copy Postman 中设置请求参数 在 Params 标签栏中可以按照键（ Key） -值（ Value） 的方式填入请求参数，请求参数可以是 0 个或者多个，还可以在 描述（Description ）栏对请求参数进行说明。 Postman 自动把 URL 地址栏中 “？”号以后请求参数在 Params 标签栏进行了自动拆分显示，在 Params 标签栏新增、修改、删除的请求参数也会在 URL 地址栏中增加、更新和删除。 打开参数栏 快速复制请求参数 点击 Params 标签栏右侧的 【Bulk Edit】按钮 参数以文本方式显示，多选或全选后可以批量复制。 原来的【Bulk Edit】 按钮这时别 【Key-Value Edit】替换，点击【 Key-Value Edit】按钮，Params 标签栏返回 Key-Value 的显示方式。 Postman 参数部分的新增、修改、删除还是很方便的。另外参数对于 URL 也很重要，这使得通过 URL 可以发起复杂的请求。理解并学会使用参数是 API 测试的基础。 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-16 20:29:57 "},"section1/making-hands-dirty.html":{"url":"section1/making-hands-dirty.html","title":"实战环节之快速上手","keywords":"","body":"实战环节：Demon 演练快速上手 本节演示使用 Postman 检查服务器是否正常对外提供服务 验证步骤： 创建请求和测试集，测试集用来管理测试请求。 创建请求和返回结果验证脚本。 运行验证脚本查看验证结果。 Your user agent does not support the HTML5 Video element. 吐司 QA，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2019-10-17 17:26:18 "}}